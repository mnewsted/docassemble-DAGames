metadata:
  title: DAGames
  short title: DAGames
  comment: This program is an attempt to make a text adventure in Docassemble.
  authors:
    - Matt Newsted
---
features:
  navigation back button: False
  question back button: False
---
include:
  - rooms.yml
  - items.yml
---
modules:
  - .base
  - .rooms
  - .items
  - docassemble.ALToolbox.misc
---
objects:
  rooms: RoomList
  items: ItemList
  items_in_list: DAList.using(object_type=Thing, there_are_any=True)
---
mandatory: True
code: |
  start_screen
  while location != 999:
    results
    # when finished put this undefine into a function maybe reset_command
    undefine('input_string', 'command', 'target', 'results', 'pick_item_to_examine', 'item_to_examine', 'examine_item', 'item_not_visible', 'pick_item_to_take', 'item_to_take', 'take_item', 'item_not_takeable', 'pick_item_to_drop', 'item_to_drop', 'drop_item', 'item_not_droppable', 'no_exit', 'debug_screen' )
  end_screen
---
sets: results
code: |
  input_string
  command = get_command(input_string)
  target = get_target(input_string)

  # exit
  if command == "exit":
    exit_screen
    
  # examine
  if command == "x" or command == "examine":
    if target == '':
      pick_item_to_examine
      target = item_to_examine
    if target in items.usable_items(location):
      examine_item
    else:
      if target != "cancel":
        item_not_visible
    
  # take
  if command == "t" or command == "take":
    if target == '':
      pick_item_to_take
      target = item_to_take
    if target in items.visible_items(location):
      if items.is_moveable(target):
        items.add_to_inventory(target)
        take_item
      else:
        item_not_takeable
    else:    
      if target != "cancel":
        item_not_visible

  # drop
  if command == "drop":
    if target == '':
      pick_item_to_drop
      target = item_to_drop
    if target in items.inventory():
      items.remove_from_inventory(location, target)
      drop_item
    else:
      if target != "cancel":
        item_not_droppable
      
  # move
  if command in valid_moves:
    command = short_direction(command)
    if rooms.is_valid_exit(location, command):
      new_location = rooms[location].exits[command]
      location = new_location
    else:
      no_exit
      #undefine('no_exit')
        
  results = True
  
---
code: |
  valid_moves = [ 'north', 'n', 'south', 's', 'east', 'e', 'west', 'w', 'up', 'u', 'down', 'd', 'northwest', 'nw', 'northeast', 'ne', 'southwest', 'sw', 'southeast', 'se' ]

  valid_commands = valid_moves + [ 'examine', 'x', 'take', 't', 'drop', 'exit' ]
---
id: start
continue button field: start_screen
question: |
  Start
---
id: end screen
event: end_screen
question: |
  The end
subquestion: |
  You made it to the end.
  
  Thanks for playing!
buttons:
  - Exit: exit
  - Restart: restart
---
id: exit screen
event: exit_screen
question: |
  Thanks for playing!
buttons:
  - Exit: exit
  - Restart: restart
---
id: command screen
question: |
  ${ rooms[location].name.text }
subquestion: |
  ${ rooms[location].desc }
  
  Visible exits: ${ comma_and_list( rooms.visible_exits(location) ) }

  % if len(items.visible_items(location)) > 0:
  Things you see: ${ comma_and_list( items.visible_items(location) ) }
  % else:
  You don't see anything special.
  % endif
fields:
  - What do you want to do?: input_string
    label above field: True
under: |
  ${ collapse_template(inventory_help)}
  [NEWLINE]
  ${ collapse_template(valid_commands_help)}

validation code: |
  if not (get_command(input_string) in valid_commands):
    validation_error("Command not recognized. Try again.", field='input_string')
---
template: valid_commands_help
subject: |
  **List of valid commands**
content: |
  Valid commands: ${ comma_list(valid_commands) }
---
template: inventory_help
subject: |
  **Inventory**
content: |
  % if len(items.inventory()) == 0:
    You got nothing.
  % else:
    You are carrying: ${ comma_and_list(items.inventory()) }
  % endif
---
id: invalid move
continue button field: no_exit
question: |
  You can't go ${ full_direction(command) }
subquestion: |
  ${ rooms[location].desc }
  
  Visible exits: **${ comma_and_list( rooms.visible_exits(location) ) }**
---
id: examine item
continue button field: examine_item
question: |
  Examine ${ target }
subquestion: |
  ${ items.get_description(target) }
---
id: item not visible
continue button field: item_not_visible
question: |
  Can't do that
subquestion: |
  You don't see ${ indefinite_article(target) }.
---
id: which item to examine
continue button field: pick_item_to_examine
question: |
  What do you want to examine?
subquestion: |
  You can examine things you can see or things you are carrying.
fields:
  - no label: item_to_examine
    input type: radio
    code: items.list_usable_as_fields(location)
---
id: take item
continue button field: take_item
question: |
  Take ${ target }
subquestion: |
  You take the ${ target }.
---
id: item not moveable
continue button field: item_not_takeable
question: |
  Can't take
subquestion: |
  You can't take ${ indefinite_article(target) }.
---
id: which item to take
continue button field: pick_item_to_take
question: |
  What do you want to take?
subquestion: |
  You can take things you can see.
fields:
  - no label: item_to_take
    input type: radio
    code: items.list_visible_as_fields(location)
---
id: which item to drop
continue button field: pick_item_to_drop
question: |
  What do you want to drop?
subquestion: |
  You can drop things you are carrying.
fields:
  - no label: item_to_drop
    input type: radio
    code: items.list_inventory_as_fields()
---
id: drop item
continue button field: drop_item
question: |
  Drop ${ target }
subquestion: |
  You drop the ${ target }.
---
id: item not droppable
continue button field: item_not_droppable
question: |
  Can't drop
subquestion: |
  You can't drop ${ target }.
---
id: debug
continue button field: debug_screen
question: |
  Debug
subquestion: |
  Check out those vars

